services:
  # config/setup.sh
  setup:
    image: alpine:latest
    container_name: ${PROJECT_NAME}_setup
    volumes:
      - ./config:/config
      - ./applications:/applications
      - ./uploads:/uploads
      - .:/workdir
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
    working_dir: /workdir
    command: sh -c "apk add --no-cache curl unzip bash docker-cli && bash ./config/setup.sh && touch /tmp/setup_complete && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/setup_complete"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - tribe_network

  # PHP 8 with FPM for Tribe
  php_tribe:
    build:
      context: ./config/tribe
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_php_tribe
    restart: unless-stopped
    volumes:
      - ./applications/tribe:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./config/tribe/phpmyadmin.config.inc.php:/var/www/html/phpmyadmin/config.inc.php
      - ./.env:/var/www/html/.env
      - ./logs:/var/log
      - ./config/tribe/php.ini:/usr/local/etc/php/php.ini
      - ./config/tribe/config.php:/var/www/html/config/config.php
      - ./README.html:/var/www/html/index.php
    command: >
      sh -c "composer install --no-interaction --optimize-autoloader &&
           php-fpm"
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # PHP 8 with FPM for Junction
  php_junction:
    build:
      context: ./config/junction
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_php_junction
    restart: unless-stopped
    volumes:
      - ./applications/junction/dist:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./logs:/var/log
      - ./config/junction/php.ini:/usr/local/etc/php/php.ini
      - ./config/junction/config.php:/var/www/html/config/config.php
    command: >
      sh -c "composer install --no-interaction --optimize-autoloader &&
           php-fpm"
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # PHP 8 with FPM for Dist PHP
  php_dist_tribe:
    build:
      context: ./config/dist-tribe-php
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_php_dist_tribe
    restart: unless-stopped
    volumes:
      - ./uploads/sites/dist-php:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./logs:/var/log
      - ./config/dist-tribe-php/php.ini:/usr/local/etc/php/php.ini
      - ./config/dist-tribe-php/config.php:/var/www/html/config/config.php
    command: >
      sh -c "if [ -f composer.json ]; then composer install --no-interaction --optimize-autoloader; fi &&
           php-fpm"
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # Nginx Web Server (Tribe)
  nginx_tribe:
    image: nginx:alpine
    container_name: ${PROJECT_NAME}_nginx_tribe
    restart: unless-stopped
    ports:
      - "${TRIBE_PORT:-4480}:4480"
    volumes:
      - ./applications/tribe:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./config/tribe/config.php:/var/www/html/config/config.php
      - ./config/tribe/phpmyadmin.config.inc.php:/var/www/html/phpmyadmin/config.inc.php
      - ./.env:/var/www/html/.env
      - ./logs:/var/log/nginx
      - ./config/tribe/conf.d/tribe.conf:/etc/nginx/conf.d/default.conf
      - ./README.html:/var/www/html/index.php
    depends_on:
      setup:
        condition: service_healthy
      php_tribe:
        condition: service_started
    networks:
      - tribe_network

  # Nginx Web Server (Junction)
  nginx_junction:
    image: nginx:alpine
    container_name: ${PROJECT_NAME}_nginx_junction
    restart: unless-stopped
    ports:
      - "${JUNCTION_PORT:-4488}:4488"
    volumes:
      - ./applications/junction/dist:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./config/junction/config.php:/var/www/html/config/config.php
      - ./logs:/var/log/nginx
      - ./config/junction/conf.d/junction.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      setup:
        condition: service_healthy
      php_junction:
        condition: service_started
    networks:
      - tribe_network

  # Nginx Web Server (Dist PHP)
  nginx_dist_tribe:
    image: nginx:alpine
    container_name: ${PROJECT_NAME}_nginx_dist_tribe
    restart: unless-stopped
    ports:
      - "${DIST_PHP_PORT:-4485}:4485"
    volumes:
      - ./uploads/sites/dist-php:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./config/dist-tribe-php/config.php:/var/www/html/config/config.php
      - ./logs:/var/log/nginx
      - ./config/dist-tribe-php/conf.d/dist-php.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      setup:
        condition: service_healthy
      php_dist_tribe:
        condition: service_started
    networks:
      - tribe_network

  # Caddy Static Site Server - Single site from uploads/sites/dist
  dist_static:
    image: caddy:alpine
    container_name: ${PROJECT_NAME}_dist_static
    restart: unless-stopped
    ports:
      - "${STATIC_PORT:-4484}:4484"
    volumes:
      - ./uploads/sites/dist:/srv
      - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./logs:/var/log/caddy
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # MySQL Backup Service
  mysql_backup:
    image: mysql:9
    container_name: ${PROJECT_NAME}_mysql_backup
    restart: "no"
    volumes:
      - ./uploads/backups:/backups
    environment:
      - MYSQL_PWD=${MYSQL_ROOT_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - PROJECT_NAME=${PROJECT_NAME}
    command: >
      sh -c "
        # Function to create backup
        create_backup() {
          echo 'Creating MySQL backup...'
          BACKUP_DATE=\$$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE=\"/backups/${PROJECT_NAME}_backup_\$$BACKUP_DATE.sql.gz\"
          
          # Create the backup
          mysqldump -h \$$DB_HOST -P \$$DB_PORT -u root --single-transaction --routines --triggers \$$DB_NAME | gzip > \$$BACKUP_FILE
          
          if [ \$$? -eq 0 ]; then
            echo \"Backup created successfully: \$$BACKUP_FILE\"
            
            # Keep only last 7 backups
            echo 'Cleaning up old backups (keeping last 7)...'
            cd /backups
            ls -t ${PROJECT_NAME}_backup_*.sql.gz | tail -n +8 | xargs -r rm -f
            echo 'Backup cleanup completed'
          else
            echo 'Backup failed!'
            exit 1
          fi
        }
        
        # Function to handle shutdown signal
        cleanup() {
          echo 'Received shutdown signal, creating final backup...'
          create_backup
          echo 'Backup service shutting down'
          exit 0
        }
        
        # Set up signal handler
        trap cleanup SIGTERM SIGINT
        
        # Create initial backup
        create_backup
        
        # Keep the container running and wait for signals
        echo 'Backup service started. Waiting for shutdown signal...'
        while true; do
          sleep 30
        done
      "
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

# Networks
networks:
  # External network to connect to tribe-server services
  tribe_network:
    external: true
    name: tribe_network